from keras.layers import Input, Dense, LSTM, GRU, SimpleRNN, Reshape, Flatten, Dropout, BatchNormalization, Activation, MaxPooling1D, concatenate, Embedding, multiply, Conv2DTranspose  
from keras.layers.advanced_activations import LeakyReLU 
from keras.layers.convolutional import UpSampling2D, Conv2D, Conv1D 
from keras.models import Sequential, Model 
from keras.optimizers import Adam 
import matplotlib.pyplot as plt 
import numpy as np

import random
pulse = []
all_pulse = []
c = 30
q = []
for j in range(1000):
    for i in range(20):
        if i>=1:
            a = random.randint(60, 80)
            if abs(pulse[i-2][1]-a)>5:
                 while abs(pulse[i-2][1]-a) > 5:
                     a = random.randint(60, 80)
                 q.append(c)
                 q.append(a)
                 pulse.append(q)
                 
            else:
                q.append(c)
                q.append(a)
                pulse.append(q)
        else:    
            a = random.randint(60, 80)
            q.append(c)
            q.append(a)
            pulse.append(q)
        q = []
        c+=30    
    all_pulse.append(pulse)
    pulse = []
    c=30
#print(all_pulse)
all_pulse = np.array(all_pulse)
all_pulse = all_pulse/600

batch_size = 100
epochs = 10000
save = 100

generator = Sequential()                                                   
generator.add(Dense(256, input_shape=[2], name = "Generator_In"))
generator.add(BatchNormalization())
generator.add(Dense(512, activation = 'relu')) 
generator.add(BatchNormalization()) 
generator.add(Dense(1024, activation = 'relu'))
generator.add(BatchNormalization())                                                                                                                       
generator.add(Dense(512, activation = 'relu'))
generator.add(BatchNormalization()) 
generator.add(Dense(256, activation = 'relu'))
generator.add(BatchNormalization())                                                                                       
generator.add(Dense(40, activation='relu'))
generator.add(Reshape((20, 2), name = "Generator_Out"))


discriminator  = Sequential()
discriminator.add(Conv1D(32, 3, activation = 'relu', input_shape = [20,2]))
discriminator.add(MaxPooling1D(pool_size=3, strides=1, padding = 'same'))
discriminator.add(Conv1D(64, 3, activation = 'relu'))
discriminator.add(MaxPooling1D(pool_size=3, strides=1, padding = 'same'))
discriminator.add(Dense(128, activation = 'relu')) #, = [20, 2]))
discriminator.add(Dropout(0.3))
discriminator.add(Flatten())
discriminator.add(Dense(128, activation = 'relu'))
discriminator.add(Dense(256, activation = 'relu'))
discriminator.add(Dense(1, activation='sigmoid', name='Discriminator_Out'))

optimizer = Adam(0.0002, 0.5)
discriminator.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
        
generator.compile(loss='binary_crossentropy', optimizer='adam')
z = Input(shape=(2), name = "GAN_In")            
img = generator(z)
discriminator.trainable = False
valid = discriminator(img)
combined = Model(z, valid, name = "GAN")                   
combined.compile(loss='binary_crossentropy', optimizer='adam')

valid = np.ones((batch_size, 1))                                        
fake = np.zeros((batch_size, 1))  
        
for epoch in range(epochs):
  idx = np.random.randint(0, 200, batch_size)          
  imgs = all_pulse[idx]                                                

  noise = np.random.normal(0, 1, (batch_size, 2))     

  gen_imgs = generator.predict(noise)                           
  discriminator.trainable = True
  d_loss_real = discriminator.train_on_batch(imgs, valid)        
  d_loss_fake = discriminator.train_on_batch(gen_imgs, fake)     
  d_loss = np.add(d_loss_real, d_loss_fake) / 2           
            
  noise = np.random.normal(0, 1, (batch_size, 2)) 
  discriminator.trainable = False
  g_loss = combined.train_on_batch(x = noise, y = valid) 
  if (epoch % save ==0) or  (epoch == epochs - 1):
    print ("%d [D loss: %f, acc.: %.2f%%] [G loss: %f]" % (epoch, d_loss[0], 100*d_loss[1], g_loss))
    #noise = np.random.normal(0, 1, (1, 2))
    #h = generator.predict(noise)
    ##print(h*120)
    #h = h*600
    #h_x = []
    #h_y = []
    #for i in h[0]:
    #  h_x.append(i[0])
    #  h_y.append(i[1])
    #plt.plot(h_x, h_y, color = 'k') 
    #plt.fill_between(h_x, h_y, 0,color = 'red')
    #plt.xlabel('Секунды')
    #plt.ylabel('Удары в минуту')
    #plt.show() 
    
    pulse_x=[]
pulse_y=[]
idx = np.random.randint(0, 200)
for i in all_pulse[idx]:
  pulse_x.append(i[0]*600)
  pulse_y.append(i[1]*600)
plt.plot(pulse_x, pulse_y, color = 'k') 
plt.fill_between(pulse_x, pulse_y, 0,color = 'red')
plt.xlabel('Секунды')
plt.ylabel('Удары в минуту')

noise = np.random.normal(0, 1, (1, 2))
h = generator.predict(noise)
print(h*600)
h = h*600
h_x = []
h_y = []
for i in h[0]:
  h_x.append(i[0])
  h_y.append(i[1])
plt.plot(h_x, h_y, color = 'k') 
plt.fill_between(h_x, h_y, 0,color = 'red')
plt.xlabel('Секунды')
plt.ylabel('Удары в минуту')
    
